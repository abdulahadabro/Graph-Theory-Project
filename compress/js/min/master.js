function closeOpenLeftPanel(){var e=$("#leftPanel");e.hasClass("closed")?e.removeClass("closed"):e.addClass("closed")}function createLeftPanelMenuButtons(){var e=$("#leftPanelMenu"),a="";a+="<div id='newMenuBtn' class='menuItem' onclick='createNewGraph()'><div class='menuIcon' /><div class='itemText'>New</div></div>",a+="<div id='openMenuBtn' class='menuItem' onclick='openNewGraph()' ><div class='menuIcon'/><div class='itemText'>Open</div></div>",a+="<div id='saveMenuBtn' class='menuItem' onclick='saveGraph()'  ><div class='menuIcon' /><div class='itemText'>Save</div></div>",$(e).html(a)}function creatLeftPanelDrawingButtons(){var e=$("#leftPanelMenu"),a="";a+="<div id='addNodeBtn' class='drawingMenuItem hiden' onclick='addNodeToGraph()'><div class='menuIcon' /><div class='itemText'>Add Node</div></div>";var t=$('<div class="row hiden"><div class="lable" >Node Name:</div><div class="userInput value"><input type="text" name="nodeName" min="1" value="v" id="nodeNameEdit" onkeyup="changeNodeNameEdit(this)" onchange="changeNodeNameEdit(this)"/></div></div>'),l=$('<div class="row hiden"><div class="lable" >Edge Weight:</div><div class="userInput value"><input type="number" name="edgeWeight" min="0" value="0" id="edgeWeightEdit" onkeyup="changeEdgeWeightEdit(this)" onchange="changeEdgeWeightEdit(this)"/></div></div>');$(e).append(a),$(e).append(t),$(e).append(l),$(e).find("#addNodeBtn").mousedown(function(e){IS_MOUSE_DOWN=!0,$(".graphArea.selected").addClass("grabbing")}),$(document).mouseup(function(e){if(IS_MOUSE_DOWN){var a=e.target.getAttribute("class");null!=a&&-1!=a.indexOf("svgContainer")&&-1!=a.indexOf("show")&&(console.log(e.screenX),addNodeToGraph({x:e.offsetX,y:e.offsetY}))}IS_MOUSE_DOWN=!1,$(".graphArea.selected").removeClass("grabbing")})}function createUserOptionPanel(e){var a=$('<div class="row"><div class="lable" >Selected Graph:</div><div id="selectedGraph" class="value">none</div></div>'),t=$("<div class='row comboboxHolder'><span>Other Graph:</span><div id='chartsCompobox' class='chartsCompobox value'></div>"),l=$("<div class='row comboboxHolder'><span>From node:</span><div id='fromNodeCompobox' class='nodesCompobox value'></div><span>To node:</span><div id='toNodeCompobox' class='nodesCompobox value'></div><br>"),n=($("<div class='button' onclick='evaluateGraph()'><div class='lable'>Evaluate</div></div>"),$("<div id='checkAll' ><input id='checkUnCheckAll' type='checkbox' name='mainChecker' onchange='checkUnCheckAll(this)' ><span>(un)check All</span></div>"),'<div id="node-name-weight">');n+='Node Name: <input type="text" name="nodeName" min="1" value="v" id="nodeNameEdit" onkeyup="changeNodeNameEdit(this)" onchange="changeNodeNameEdit(this)">',n+='Edge Weight: <input type="number" name="edgeWeight" min="0" value="0" id="edgeWeightEdit" onkeyup="changeEdgeWeightEdit(this)" onchange="changeEdgeWeightEdit(this)">';var i=$('<div class="leftUserOption"><div class="left-panel-header">Graph Information</div></div>'),o=$('<div class="general-info-details"></div>');o.append(a).append(t).append(l).append(n),i.append(o);var s=$('<div class="rightUserOption"></div>'),r=$("<div class='row'><div class='squared-checkbox'><input type='checkbox' id='isBipartile' name='userOptions'><label for='isBipartile'></label></div><span>Check if Bipartile</span><br>"),d=$("<div class='row'><div class='squared-checkbox'><input id='isPlanner' type='checkbox' name='userOptions' ><label for='isPlanner'></label></div><span>Check if Planner</span><br>"),h=$("<div class='row'><div class='squared-checkbox'><input id='isTree' type='checkbox' name='userOptions'><label for='isTree'></label></div><span>Check if Tree</span><br>"),c=$("<div class='row'><div class='squared-checkbox'><input id='isListAllPathes' type='checkbox' name='userOptions'><label for='isListAllPathes'></label></div><span>List all paths of 1,2,3,... n length</span><br>"),p=$("<div class='row'><div class='squared-checkbox'><input id='isListAllCycles'  type='checkbox' name='userOptions'><label for='isListAllCycles'></label></div><span>List all cycles (loops) of 3,4,,,,n length</span><br>");s.append(r).append(d).append(h).append(c).append(p);var u=$('<div class="lastUserOption"></div>'),v=$("<div class='row'><div class='squared-checkbox'><input id='isTestEuler' type='checkbox' name='userOptions'><label for='isTestEuler'></label></div><span>List all Euler paths or cycles</span><br>"),m=$("<div class='row'><div class='squared-checkbox'><input id='isTestHamilton' type='checkbox' name='userOptions'><label for='isTestHamilton'></label></div><span>List all Hamilton paths and cycles</span><br>"),g=$("<div class='row'><div class='squared-checkbox'><input id='isColorRequired' type='checkbox' name='userOptions'><label for='isColorRequired'></label></div><span>Color the graph</span><br>"),f=$("<div class='row'><div class='squared-checkbox'><input id='isIzomorphism' type='checkbox' name='userOptions'><label for='isIzomorphism'></label></div><span>Check Izomorphism with other graph</span>"),P=$("<div class='row'><div class='squared-checkbox'><input id='isShortestPath' type='checkbox' name='userOptions'><label for='isShortestPath'></label></div><span>Short Path between Two Nodes</span><br>");u.append(v).append(m).append(g).append(f).append(P);var N=$('<div class="checkbox-options"></div>').append(s).append(u),I=$('<div class="left-panel-header">Options</div>');e.append(i).append(I).append(N),initializeChartsCombobox(),initializeFromToNodesCombobox()}function initializeChartsCombobox(){var e=[];for(var a in MAIN_GRAPHS)e.push(MAIN_GRAPHS[a]);if(0==e.length)return $("#chartsCompobox").html(""),void(IZOMORPHISM_WITH_ID=null);for(var t='<select id="mCP" onchange="izomorphismChartInputChange(this)">',l=0;l<e.length;l++)t+='<option value="'+e[l].graphId+'">'+e[l].graphTitle+"</option>";t+="</select>",$("#chartsCompobox").html(t),IZOMORPHISM_WITH_ID=e[0].graphId}function initializeFromToNodesCombobox(){var e=CUURENT_OPEN_GRAPH,a=MAIN_GRAPHS[e];if(!a||0==a.allNodes.length)return $("#fromNodeCompobox").html(""),$("#toNodeCompobox").html(""),FROM_NODE_ID=null,void(TO_NODE_ID=null);for(var t=a.allNodes,l='<select id="fromNodeCB" onchange="fromNodeSPInputChange(this)">',n=0;n<t.length;n++)l+='<option value="'+t[n].id+'">'+t[n].name+"</option>";l+="</select>",$("#fromNodeCompobox").html(l);for(var l='<select id="toNodeCB" onchange="toNodeSPInputChange(this)">',n=0;n<t.length;n++)l+='<option value="'+t[n].id+'">'+t[n].name+"</option>";l+="</select>",$("#toNodeCompobox").html(l),FROM_NODE_ID=t[0].id,TO_NODE_ID=t[0].id}function fromNodeSPInputChange(e){var a=e.value;FROM_NODE_ID=a}function toNodeSPInputChange(e){var a=e.value;TO_NODE_ID=a}function izomorphismChartInputChange(e){var a=e.value;IZOMORPHISM_WITH_ID=a}function changeNodeNameEdit(e){e.value.length>0?NODE_NAME=e.value:e.value="v"}function changeEdgeWeightEdit(e){e.value>0?EDGE_WEIGHT=e.value:(e.value="0",EDGE_WEIGHT=null)}function createMainPageLayout(e){var a="";a+="<div id='mainPageInfoPanel' ></div>",a+="<div id='mainPageGraphsContainer'><div id='MainTabs'></div></div>",a+="<div id='secondPageInfoPanel'></div>",e.append($(a))}function checkUnCheckAll(e){var a=$("#mainPageInfoPanel").find("input");if(e.checked)for(t=0;t<a.length;t++)"userOptions"==a[t].name&&(a[t].checked=!0);else for(var t=0;t<a.length;t++)"userOptions"==a[t].name&&(a[t].checked=!1)}function evaluateGraph(e){if(e||(e=CUURENT_OPEN_GRAPH),$("#secondPageInfoPanel").html(""),null==e)return alert("Please Create/Open a gaph first!"),!1;if(setChartInfoSubPanel(e),0==MAIN_GRAPHS[e].getGraphSize())return!1;formGraphMatrix(MAIN_GRAPHS[e]),findAllDegrees(e);var a=MAIN_GRAPHS[e].nodesDegrees,t=[];for(key in a){var l=1==a[key]?"  "+a[key]+" Node ":"  "+a[key]+" Nodes ";t.push({label:"Degree of ("+key+")  ",value:l})}if(t.length>0&&createSubInfoPanel(e,{title:"Degree of Nodes",rows:t}),$("#isBipartile")[0].checked){var n=!0;$("#isColorRequired")[0].checked&&(n=!1),isGraphBipartitle(e,{isColorNodes:n}),createSubInfoPanel(e,{title:"Bipartite Test",rows:[{label:"Is Bipartite",value:null==MAIN_GRAPHS[e].isBipartite?"Not Evaluated !":MAIN_GRAPHS[e].isBipartite?"Yes":"No"}]})}if($("#isPlanner")[0].checked&&(isGraphPlanner(e),createSubInfoPanel(e,{title:"Planer Test",rows:[{label:"Is Planner",value:MAIN_GRAPHS[e].isPlanner?"Yes":"No"}]})),$("#isListAllPathes")[0].checked&&null!=FROM_NODE_ID&&null!=TO_NODE_ID){findAllPathesWithAllLengths(e,FROM_NODE_ID,TO_NODE_ID);t=[];for(PathLength in MAIN_GRAPHS[e].allPathes){c="";if((v=MAIN_GRAPHS[e].allPathes[PathLength]).length>0){1==v.length?c+="("+v.length+" Path found):":c+="("+v.length+" Paths found):",c+="<br>";for(u=0;u<v.length;u++)c+=v[u].toString(),c+="<br>";m={label:"Length "+PathLength,value:c};t.push(m)}}var i=getNodeOfId(e,FROM_NODE_ID),o=getNodeOfId(e,TO_NODE_ID);0==t.length?createSubInfoPanel(e,{title:"All Pathes (from: "+i.name+" - to: "+o.name+")",rows:[{label:"No Pathes between these two points",value:""}]}):createSubInfoPanel(e,{title:"All Pathes (from: "+i.name+" - to: "+o.name+")",rows:t})}if($("#isListAllCycles")[0].checked||$("#isTree")[0].checked){if(findAllCyclesWithAllLengths(e),$("#isListAllCycles")[0].checked){t=[];for(cycleLength in MAIN_GRAPHS[e].allCycles){c="";if((v=MAIN_GRAPHS[e].allCycles[cycleLength]).length>0){1==v.length?c+="("+v.length+" Cycle found):":c+="("+v.length+" Cycles found):",c+="<br>";for(u=0;u<v.length;u++)c+=v[u].toString(),c+="<br>";m={label:"Length "+cycleLength,value:c};t.push(m)}}0==t.length?createSubInfoPanel(e,{title:"All Cycles",rows:[{label:"No Cycles in the Graph",value:""}]}):createSubInfoPanel(e,{title:"All Cycles",rows:t})}if($("#isTree")[0].checked){var s=isGraphConnected(e),r=!1;for(cycleLength in MAIN_GRAPHS[e].allCycles)if((v=MAIN_GRAPHS[e].allCycles[cycleLength]).length>0){r=!0;break}var d=1==s&&0==r;createSubInfoPanel(e,{title:"Tree Test",rows:[{label:"Is Tree",value:d?"Yes":"No"}]})}}if($("#isTestEuler")[0].checked)if(TestForEuler(e),0==MAIN_GRAPHS[e].isEulerian)createSubInfoPanel(e,{title:"Euler Path or Cycle",rows:[{label:"Graph is NOT Eulerian",value:""}]});else{var t=[],h=MAIN_GRAPHS[e].isEulerPath?"Euler Paths":"Euler Cycles",c="";if((p=MAIN_GRAPHS[e].AllEulerTours.length)>0){1==p?MAIN_GRAPHS[e].isEulerPath?c+="("+p+" Path found):":c+="("+p+" Cycle found):":MAIN_GRAPHS[e].isEulerPath?c+="("+p+" Paths found):":c+="("+p+" Cycles found):",c+="<br>";for(u=0;u<p;u++)c+=(v=MAIN_GRAPHS[e].AllEulerTours[u]).toString(),c+="<br>";m={label:h,value:c};t.push(m)}0==t.length?createSubInfoPanel(e,{title:"Euler Path or Cycle",rows:[{label:"Graph is NOT Eulerian",value:""}]}):createSubInfoPanel(e,{title:"Euler Path or Cycle",rows:t})}if($("#isTestHamilton")[0].checked)if(TestForHamilton(e),0==MAIN_GRAPHS[e].isHamiltonian)createSubInfoPanel(e,{title:"Hamilton Path and Cycle",rows:[{label:"Graph is NOT Hamiltonian",value:""}]});else{var t=[],h="Hamilton Paths",p=MAIN_GRAPHS[e].AllHamiltonPaths.length,c="";if(p>0){c+=1==p?"("+p+" Path found):":"("+p+" Paths found):",c+="<br>";for(u=0;u<p;u++)c+=(v=MAIN_GRAPHS[e].AllHamiltonPaths[u]).toString(),c+="<br>";m={label:h,value:c};t.push(m)}var h="Hamilton Cycles",c="";if((p=MAIN_GRAPHS[e].AllHamiltonTours.length)>0){c+=1==p?"("+p+" Cycle found):":"("+p+" Cycles found):",c+="<br>";for(var u=0;u<p;u++){var v=MAIN_GRAPHS[e].AllHamiltonTours[u];c+=v.toString(),c+="<br>"}var m={label:h,value:c};t.push(m)}0==t.length?createSubInfoPanel(e,{title:"Hamilton Path and Cycle",rows:[{label:"Graph is NOT Hamiltonian",value:""}]}):createSubInfoPanel(e,{title:"Hamilton Path/Cycle",rows:t})}if($("#isColorRequired")[0].checked&&(colorGraphWithBacktraking(e),createSubInfoPanel(e,{title:"Coloring",rows:[{label:"num Of used colors",value:MAIN_GRAPHS[e].graphMinNumOfColors}]})),$("#isIzomorphism")[0].checked){var g=MAIN_GRAPHS[e].graphTitle,f=MAIN_GRAPHS[IZOMORPHISM_WITH_ID].graphTitle;if(null==IZOMORPHISM_WITH_ID||IZOMORPHISM_WITH_ID==e)createSubInfoPanel(e,{title:"Izomorphism Test for ( "+g+"  and  "+f+")",rows:[{label:"is Izomorphisim",value:"Yes , they are the same graph !"}]});else{var P=checkifIzomorphism(e,IZOMORPHISM_WITH_ID);0==P.isIzo?createSubInfoPanel(e,{title:"Izomorphism Test for ( "+g+"  and  "+f+")",rows:[{label:"is Izomorphisim",value:"No , they are not"},{label:"invariant",value:P.invariants[0]}]}):createSubInfoPanel(e,{title:"Izomorphism Test for ( "+g+"  and  "+f+")",rows:[{label:"is Izomorphisim",value:"They Could be"},{label:"invariant",value:"No invariants found"}]})}}if($("#isShortestPath")[0].checked&&null!=FROM_NODE_ID&&null!=TO_NODE_ID){var i=getNodeOfId(e,FROM_NODE_ID),o=getNodeOfId(e,TO_NODE_ID);FROM_NODE_ID==TO_NODE_ID?(MAIN_GRAPHS[e].shortestPath=[i.name],MAIN_GRAPHS[e].shortestPathCost=0):findShortPath(e,FROM_NODE_ID,TO_NODE_ID);var N=MAIN_GRAPHS[e].shortestPath,I=MAIN_GRAPHS[e].shortestPathCost;null==N?createSubInfoPanel(e,{title:"Shortest Path (from: "+i.name+" - to: "+o.name+")",rows:[{label:"No Path exists",value:""}]}):createSubInfoPanel(e,{title:"Shortest Path (from: "+i.name+" - to: "+o.name+")",rows:[{label:"Shortest Path",value:N.toString()},{label:"Shortest Path Distance",value:I}]})}}function createNewGraph(e){$("#MainTabs").show(),$("#mainPageInfoPanel").show(),$("#node-name-weight").show(),e||(e={}),e=$.extend(!0,{},GRAPH,e);var a=$("#mainPageGraphsContainer"),t=$("#MainTabs");if(NUM_OF_GRAPHS<20){NUM_OF_GRAPHS++,GRAPHS_ID_INC++;var l="graph"+GRAPHS_ID_INC,n=$("<div id="+l+"Header class='graphAreaHeader'><div class='title'>Graph"+GRAPHS_ID_INC+" </div><div class='changeBetween'></div><div class='closeGraph'></div></div>");n.click(function(e){if("closeGraph"==e.target.className)if($("#"+l+"Header").remove(),$("#"+l+"Area").remove(),delete MAIN_GRAPHS[l],NUM_OF_GRAPHS--,initializeChartsCombobox(),NUM_OF_GRAPHS>0){var a=0;for(var t in MAIN_GRAPHS)if(MAIN_GRAPHS.hasOwnProperty(t)){if(++a<NUM_OF_GRAPHS)continue;selectGraph(t);break}}else $(".drawingMenuItem").addClass("hiden"),$(".row").addClass("hiden"),$(".row #selectedGraph").html("none"),initializeFromToNodesCombobox();else-1!==e.target.className.indexOf("changeBetween")?document.querySelector("#"+l+"Area .svgContainer").hasClass("show")?(document.querySelector("#"+l+"Area .svgContainer").removeClass("show"),$("#"+l+"Area .graphTextArea").addClass("show"),$("#"+l+"Header .changeBetween").addClass("graphIcon")):(document.querySelector("#"+l+"Area .svgContainer").addClass("show"),$("#"+l+"Area .graphTextArea").removeClass("show"),$("#"+l+"Header .changeBetween").removeClass("graphIcon")):selectGraph(l);e.stopPropagation()});var i=$("<div id="+l+"Area class='graphArea' ><svg class='svgContainer show' xmlns='http://www.w3.org/2000/svg' // onmousedown='hideAllNodeTooltip(evt);',></svg><div class='graphTextArea' >"+e.fileContent+"</div></div>");a.append(i),i.find(".graphTextArea").text(e.fileContent);i.find("svg").css("min-height","534px"),i.find(".graphTextArea").css("min-height","534px"),t.append(n),MAIN_GRAPHS[l]||(MAIN_GRAPHS[l]=$.extend(!0,{},e,{graphTitle:"Graph"+GRAPHS_ID_INC,graphId:l})),null!=MAIN_GRAPHS[l].graphMatrix&&drawGraphByMatrix(l),selectGraph(l),initializeChartsCombobox()}else alert("Maximum number of open graphs is 5 ,, please close to continue")}function selectGraph(e){$(".graphAreaHeader").removeClass("selected"),$(".graphArea").removeClass("selected"),$("#"+e+"Header").addClass("selected"),$("#"+e+"Area").addClass("selected"),CUURENT_OPEN_GRAPH=e;var a=$("#"+e+"Header").find(".title").html();$(".row #selectedGraph").html(a),initializeFromToNodesCombobox(),$(".drawingMenuItem").removeClass("hiden"),$(".row").removeClass("hiden"),evaluateGraph(e)}function saveGraph(){var e=CUURENT_OPEN_GRAPH;if(null!=e){var a='<?xml version="1.0" encoding="UTF-8"?>\n';a+="\x3c!-- This file was written by the Grapher project using GraphML format--\x3e\n",a+='<graphml xmlns="http://graphml.graphdrawing.org/xmlns"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" ',a+='xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd">\n',a+='<key id="d0" for="node" attr.name="color" attr.type="string"/>\n',a+='<key id="d1" for="edge" attr.name="weight" attr.type="double"/>\n',a+='<graph id="'+e+'" edgedefault="undirected">\n';for(l=0;l<MAIN_GRAPHS[e].allNodes.length;l++){var t=MAIN_GRAPHS[e].allNodes[l];a+='<node id="'+t.name+'">\n',null!=t.color&&(a+='<data key="d0">'+t.color+"</data>"),a+="</node>\n"}for(var l=0;l<MAIN_GRAPHS[e].allEdges.length;l++){var n=MAIN_GRAPHS[e].allEdges[l],i=void 0===n.id?"e"+l:n.id,o=getNodeOfId(e,n.source);null==o&&(o={name:n.source});var s=getNodeOfId(e,n.target);null==s&&(s={name:n.target}),a+='<edge id="'+i+'" source="'+o.name+'" target="'+s.name+'">\n',null!=n.weight&&(a+='<data key="d1">'+n.weight+"</data>\n"),a+="</edge>\n"}a+="</graph>\n",a+="</graphml>\n";var r=document.createElement("a"),d=MAIN_GRAPHS[e].graphTitle+"FileGraphml.xml",r=document.createElement("a"),h=new Blob([a],{type:"text/plain"});r.setAttribute("href",window.URL.createObjectURL(h)),r.setAttribute("download",d),r.dataset.downloadurl=["text/plain",r.download,r.href].join(":"),r.draggable=!0,r.classList.add("dragout"),r.click()}else alert("So selected Graph to save, Create one!")}function saveGraphAS(){connectNodes(CUURENT_OPEN_GRAPH)}function addNodeToGraph(e){if(e||(e={x:100,y:50}),null!==CUURENT_OPEN_GRAPH){var a={id:(new Date).getTime()+"",name:NODE_NAME+NODES_COUNTER,x:e.x,y:e.y};addNode(CUURENT_OPEN_GRAPH,a),MAIN_GRAPHS[CUURENT_OPEN_GRAPH].allNodes.push({id:a.id,name:a.name}),NODES_COUNTER++,formGraphMatrix(MAIN_GRAPHS[CUURENT_OPEN_GRAPH]),initializeFromToNodesCombobox()}}$(document).ready(function(){hackSVG(),createLeftPanelMenuButtons(),creatLeftPanelDrawingButtons(),createMainPageLayout($("#mainPageContainer")),createUserOptionPanel($("#mainPageInfoPanel"))});