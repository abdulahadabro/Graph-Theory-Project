function checkifIzomorphism(e,r){var t={isIzo:!1,invariants:[]},n=MAIN_GRAPHS[e].allNodes,s=MAIN_GRAPHS[e].allEdges,a=MAIN_GRAPHS[r].allNodes,l=MAIN_GRAPHS[r].allEdges;if(n.length!=a.length)return t.isIzo=!1,t.invariants.push("Number of vertices is not equal"),t;if(s.length!=l.length)return t.isIzo=!1,t.invariants.push("Number of edges is not equal"),t;findAllDegrees(e),findAllDegrees(r);var i=MAIN_GRAPHS[e].nodesDegrees,o=MAIN_GRAPHS[r].nodesDegrees,h=0,A=0;for(key in i)h++;for(key in o)A++;if(h!=A)return t.isIzo=!1,t.invariants.push("Nodes degrees are different"),t;for(key in i)if(i[key]!=o[key])return t.isIzo=!1,t.invariants.push("Nodes degrees are different"),t;findAllCyclesWithAllLengths(e),findAllCyclesWithAllLengths(r);var d=MAIN_GRAPHS[e].allCycles,g=MAIN_GRAPHS[r].allCycles;h=0,A=0;for(key in d)h++;for(key in g)A++;if(h!=A)return t.isIzo=!1,t.invariants.push("Cycles Lengths are different"),t;for(key in d)if(d[key].length!=g[key].length)return t.isIzo=!1,t.invariants.push("Cycles Lengths are different"),t;return t.isIzo=!0,t.invariants.push("They could be izomorphism"),t}function findShortPath(e,r,t){for(var n=[],s=[],a=null,l=null,i=0;i<MAIN_GRAPHS[e].allNodes.length;i++){var o=$.extend(!0,{},DiVertex),h=MAIN_GRAPHS[e].allNodes[i];o.createDiVertex(h.id,h.name),n.push(o),h.id==r&&(a=i),h.id==t&&(l=i)}for(i=0;i<MAIN_GRAPHS[e].allEdges.length;i++){var A=$.extend(!0,{},DiEdge),d=MAIN_GRAPHS[e].allEdges[i],g=null==d.weight?0:d.weight;A.createDiEdge("Edge_"+i,n[d.sourceIndex],n[d.targetIndex],parseFloat(g)),s.push(A)}var f=$.extend(!0,{},DiGraph);f.createDiGraph(n,s);var N=$.extend(!0,{},DijkstraAlgorithm);N.createDijkstraAlgorithm(f),N.execute(n[a]);var u=N.getPath(n[l]);if(MAIN_GRAPHS[e].shortestPath=null,MAIN_GRAPHS[e].shortestPathCost=null,null==u.path)console.log("No Path exists");else{MAIN_GRAPHS[e].shortestPath=[],MAIN_GRAPHS[e].shortestPathCost=u.distance;for(key in u.path)MAIN_GRAPHS[e].shortestPath.push(u.path[key].name)}}function colorGraphWithBacktraking(e){for(var r=MAIN_GRAPHS[e].allNodes.length,t=MAIN_GRAPHS[e].graphMatrix.matrix,n=[],s=[],a=0;a<t.length+1;a++)n.push(0),s.push(0);s.pop(),t.unshift(s);for(a=0;a<t.length;a++)t[a].unshift(0);MAIN_GRAPHS[e].graphColors=null;for(var l=1;l<=r;l++){var i=$.extend(!0,{},BackTrackGraphColorer);if(i.createGrColor(r,l,t,n,e),i.mColoring(1),0!=i.soln){for(var n=[],a=1;a<=i.n;a++)n.push(i.x[a]-1);reColorNodes(e,n),MAIN_GRAPHS[e].graphMinNumOfColors=l,MAIN_GRAPHS[e].graphColors=n;break}}}function isGraphConnected(e){var r=MAIN_GRAPHS[e].allNodes.length,t=MAIN_GRAPHS[e].allEdges.length,n=$.extend(!0,{},E_Graph);n.createEulerGraph(r);for(s=0;s<MAIN_GRAPHS[e].allNodes.length;s++)n.addVertix(MAIN_GRAPHS[e].allNodes[s].name);for(var s=0;s<t;s++){var a=MAIN_GRAPHS[e].allEdges[s].source,l=getNodeOfId(e,a).name,i=MAIN_GRAPHS[e].allEdges[s].target,o=getNodeOfId(e,i).name,h=MAIN_GRAPHS[e].allEdges[s].weight;n.addEdge(l,o,h)}return MAIN_GRAPHS[e].isConnected=!(r>1&&0==t)&&(1==r&&0==t||isConnected(n)),MAIN_GRAPHS[e].isConnected}function findAllDegrees(e){var r=MAIN_GRAPHS[e].allNodes.length,t=MAIN_GRAPHS[e].allEdges.length,n=$.extend(!0,{},E_Graph);n.createEulerGraph(r);for(h=0;h<t;h++){var s=MAIN_GRAPHS[e].allEdges[h].source,a=getNodeOfId(e,s).name,l=MAIN_GRAPHS[e].allEdges[h].target,i=getNodeOfId(e,l).name,o=MAIN_GRAPHS[e].allEdges[h].weight;n.addEdge(a,i,o)}MAIN_GRAPHS[e].nodesDegrees={};for(var h=0;h<n.verts.length;h++){var A=n.verts[h].degree;MAIN_GRAPHS[e].nodesDegrees[A]?MAIN_GRAPHS[e].nodesDegrees[A]++:MAIN_GRAPHS[e].nodesDegrees[A]=1}n.verts.length<r&&(MAIN_GRAPHS[e].nodesDegrees[0]=r-n.verts.length)}function findAllCyclesWithAllLengths(e){for(var r=MAIN_GRAPHS[e].allNodes,t=MAIN_GRAPHS[e].graphMatrix.matrix,n=[],s=0;s<r.length;s++)n.push(r[s].name);var a=$.extend(!0,{},ElementaryCyclesSearch);a.createElementaryCyclesSearch(t,n);var l=a.getElementaryCycles();MAIN_GRAPHS[e].allCycles={};for(s=0;s<l.length;s++){var i=l[s];if(i.push(i[0]),i.length>3&&!isCycleExist(i,MAIN_GRAPHS[e].allCycles)){var o=i.length-1;MAIN_GRAPHS[e].allCycles[o]||(MAIN_GRAPHS[e].allCycles[o]=[]),MAIN_GRAPHS[e].allCycles[o].push(i)}}}function findAllPathesWithAllLengths(e,r,t){for(var n=MAIN_GRAPHS[e].allNodes,s=n.length,a=MAIN_GRAPHS[e].graphMatrix.matrix,l=null,i=null,o=0;o<n.length&&(n[o].id!=r||(l=o,null==i))&&(n[o].id!=t||(i=o,null==l));o++);MAIN_GRAPHS[e].allPathes={};for(o=1;o<=s;o++){var h=o;pathsList=[],paths=[],countALLPathes(n,a,l,i,h,s),MAIN_GRAPHS[e].allPathes[h]=$.extend(!0,[],pathsList)}}function countALLPathes(e,r,t,n,s,a){if(paths.push(e[t].name),0==s)return e[t].name==e[n].name?void pathsList.push(paths.toString()):void 0;for(var l=0;l<a;l++)1==r[t][l]&&(countALLPathes(e,r,l,n,s-1,a),paths.pop())}function isGraphPlanner(e){var r=$.extend(!0,{},Graph);r.createGraphFromEdges(MAIN_GRAPHS[e].allEdges);var t=$.extend(!0,{},GraphTraverser);t.createGraphTraverser(r);var n=t.findCycle();null==n?(MAIN_GRAPHS[e].isPlanner=!0,console.log("Ayham :: planar")):testPlanarity(r,n)?(MAIN_GRAPHS[e].isPlanner=!0,console.log("Ayham :: planar")):(MAIN_GRAPHS[e].isPlanner=!1,console.log("Ayham :: nonplanar"))}function isGraphBipartitle(e,r){var t=!1;r&&r.isColorNodes&&(t=r.isColorNodes);for(var n=MAIN_GRAPHS[e].allNodes.length,s=MAIN_GRAPHS[e].graphMatrix.matrix,a=[],l=MAIN_GRAPHS[e].allNodes,i=0;i<l.length;i++)a.push(-1);a[0]=1;var o=[];for(o.push(0);0!=o.length;)for(var h=o.shift(),A=0;A<n;++A)if(1==s[h][A]&&-1==a[A])a[A]=1-a[h],o.push(A);else if(1==s[h][A]&&a[A]==a[h])return MAIN_GRAPHS[e].isBipartite=!1,reColorNodes(e),!1;return MAIN_GRAPHS[e].isBipartite=!0,t?reColorNodes(e,a):reColorNodes(e),!0}function isCycleExist(e,r){var t=e.length-1;for(c in r){var n=r[c];if(c==t)for(var s=0;s<n.length;s++)if(isSameCycle(n[s],e))return!0}return!1}function isSameCycle(e,r){if(e.length!=r.length)return!1;for(var t=0;t<e.length;t++)if(!r.includes(e[t]))return!1;return!0}var BackTrackGraphColorer=new function(){this.G,this.x,this.n,this.m,this.soln=0,this.createGrColor=function(e,r,t,n){this.n=e,this.G=t,this.x=n,this.m=r},this.mColoring=function(e){for(var r=1;r<=this.n;r++){if(this.next_color(e),0==this.x[e])return 0;if(e==this.n)return this.soln++,1;if(1==this.mColoring(e+1))return 1}},this.next_color=function(e){for(;;){var r=1;if(this.x[e]=(this.x[e]+1)%(this.m+1),0==this.x[e])return;for(r=1;r<=this.n&&(r==e||0==this.G[r][e]||this.x[e]!=this.x[r]);r++);if(r==this.n+1)return}}},pathsList=[],paths=[];