function isBipartite(e){var t=$.extend(!0,{},GraphTraverser);return t.createGraphTraverser(e),t.isBipartite()}function addGraphs(e,t){var r=$.extend(!0,{},Graph),i=e.getVertices();for(v in i){var s=e.getNeighbors(i[v]);for(u in s)r.addEdge(i[v],s[u])}i=t.getVertices();for(v in i){s=t.getNeighbors(i[v]);for(u in s)r.addEdge(i[v],s[u])}return r}function splitIntoPieces(e,t){var r=$.extend(!0,{},GraphTraverser);return r.createGraphTraverser(e),r.splitIntoPieces(t)}function isPath(e){var t=0,r=e.getVertices();for(v in r){var i=e.getDegree(r[v]);if(1==i)t++;else if(2!=i)return!1}return 2==t}function testPlanarity(e,t){if(e.numEdges()>3*e.numVertices()-6)return!1;var r=["xbyb","bybx","ybxb","bxby"],i=splitIntoPieces(e,t);for(piece in i)if(!isPath(i[piece])){var s=null,a=t.getVertices();for(E in a)if(i[piece].hasVertex(a[E])){s=a[E];break}var n=$.extend(!0,{},Graph);n.createGraph(t);var h=s,c=t.getNeighbors(h)[0];for(n.removeEdge(h,c);!i[piece].hasVertex(c);){var d=t.getNeighbors(c);for(E in d)if(d[E]!=h){h=c,c=d[E];break}n.removeEdge(h,c)}var u=c;(j=$.extend(!0,{},GraphTraverser)).createGraphTraverser(i[piece]);var o=j.findPath(s,u,t.getVertices());if(!testPlanarity(addGraphs(t,i[piece]),addGraphs(n,o)))return!1}for(var g=$.extend(!0,{},Graph),p=i,f=0;f<p.length;f++)for(var v=p[f],l=f+1;l<p.length;l++){var y=p[l],x=" ",V="",b=0,j=$.extend(!0,{},GraphTraverser);j.createGraphTraverser(t);for(var M=0;M<t.numVertices();M++){var E=j.walkCycle();v.hasVertex(E)&&y.hasVertex(E)?(b++,V+="b",x="b"):v.hasVertex(E)&&"x"!=x?(V+="x",x="x"):y.hasVertex(E)&&"y"!=x&&(V+="y",x="y")}"x"!=x&&"y"!=x||V.charAt(0)!=x||(V=V.substring(1));var G=!1;V.length>4||b>2?G=!0:4!=V.length||r.includes(V)||(G=!0),G&&g.addEdge(f,l)}return isBipartite(g)}var Graph=new function(){this.adjacencyMap={},this.createGraphFromEdges=function(e){for(var t=0;t<e.length;t++){var r=e[t].source,i=e[t].target;r!=i&&this.addEdge(r,i)}},this.createGraph=function(e){var t=e.getVertices();for(v in t){var r=e.getNeighbors(t[v]);for(u in r)this.addEdge(t[v],r[u])}},this.addVertex=function(e){void 0===this.adjacencyMap[e]&&(this.adjacencyMap[e]=[])},this.addEdge=function(e,t){this.addVertex(e),this.addVertex(t),this.adjacencyMap[e].includes(t)||this.adjacencyMap[e].push(t),this.adjacencyMap[t].includes(e)||this.adjacencyMap[t].push(e)},this.removeEdge=function(e,t){if(this.hasEdge(e,t)&&this.hasEdge(t,e)){var r=this.adjacencyMap[e],i=r.indexOf(t);i>-1&&r.splice(i,1),this.adjacencyMap[e]=r,(i=(r=this.adjacencyMap[t]).indexOf(e))>-1&&r.splice(i,1),this.adjacencyMap[t]=r,0==this.adjacencyMap[e].length&&delete this.adjacencyMap[e],0==this.adjacencyMap[t].length&&delete this.adjacencyMap[t]}},this.numVertices=function(){var e=0;for(key in this.adjacencyMap)e++;return e},this.numEdges=function(){var e=0;for(key in this.adjacencyMap)e+=this.adjacencyMap[key].length;return e/2},this.getNeighbors=function(e){return this.adjacencyMap[e]?this.adjacencyMap[e]:[]},this.getDegree=function(e){return this.adjacencyMap[e]?this.adjacencyMap[e].length:-1},this.getVertices=function(){var e=[];for(var t in this.adjacencyMap)e.push(t);return e},this.hasVertex=function(e){return!!this.adjacencyMap[e]},this.hasEdge=function(e,t){return!(!this.adjacencyMap[e]||!this.adjacencyMap[e].includes(t))},this.print=function(){console.log("");var e="";for(k in this.adjacencyMap){e=k+":";var t=this.adjacencyMap[k];for(v in t)e+=" "+t[v];console.log(e)}},this.isCycle=function(e){var t=e.numVertices()>2,r=e.getVertices();for(v in r)t=t&&2==e.getDegree(r[v]);return t},this.subtractGraphs=function(e,t){var r=$.extend(!0,{},Graph);r.createGraph(e);var i=t.getVertices();for(v in i){var s=t.getNeighbors(i[v]);for(u in s)r.removeEdge(i[v],s[u])}return r}},GraphTraverser=new function(){this.graph,this.searched=[],this.coloring={},this.result=[],this.goal=null,this.next=null,this.prev=null,this.createGraphTraverser=function(e){this.graph=e},this.isBipartite=function(){return 0==this.graph.numVertices()||(this.coloring={},this.isBipartite1(this.graph.getVertices()[0],!0))},this.isBipartite1=function(e,t){if(this.coloring[e])return this.coloring[e]==(t?1:0);this.coloring[e]=t?1:0;var r=!0,i=this.graph.getNeighbors(e);for(n in i)r=r&&this.isBipartite1(i[n],!t);return r},this.walkCycle=function(){if(null==this.next)this.prev=this.graph.getVertices()[0],this.next=this.graph.getNeighbors(this.prev)[0];else{var e=this.graph.getNeighbors(this.next);for(n in e)if(e[n]!=this.prev){this.prev=this.next,this.next=e[n];break}}return this.prev},this.findPath=function(e,t,r){this.searched=[];for(var i=0;i<r.length;i++)this.searched.push(r[i]);return this.result=$.extend(!0,{},Graph),this.goal=t,this.findPath1(e)?this.result:null},this.findPath1=function(e){this.searched.push(e);var t=this.graph.getNeighbors(e);for(n in t){var r=t[n];if(r==this.goal)return this.result.addEdge(e,r),!0;if(!this.searched.includes(r)){if(this.result.addEdge(e,r),this.findPath1(r))return!0;this.result.removeEdge(e,r)}}return!1},this.findCycle=function(){return this.searched=[],this.result=$.extend(!0,{},Graph),this.goal=this.graph.getVertices()[0],this.findCycle1(this.goal)},this.findCycle1=function(e){this.searched.push(e);var t=this.graph.getNeighbors(e);for(n in t){if(t[n]==this.goal&&this.result.numVertices()>2)return this.result.addEdge(e,t[n]),this.result;if(!this.searched.includes(t[n])){this.result.addEdge(e,t[n]);var r=this.findCycle1(t[n]);if(null!=r)return r;this.result.removeEdge(e,t[n])}}return null},this.splitIntoPieces=function(e){this.searched=[];var t=[],r=e.getVertices();for(v in r){this.searched.push(r[v]);var i=this.graph.getNeighbors(r[v]);for(n in i)this.searched.includes(i[n])||e.hasEdge(i[n],r[v])||(this.result=$.extend(!0,{},Graph),this.result.addEdge(r[v],i[n]),this.makePiece(e,i[n]),t.push(this.result))}return t},this.makePiece=function(e,t){if(!e.hasVertex(t)){this.searched.push(t);var r=this.graph.getNeighbors(t);for(n in r)this.result.hasEdge(r[n],t)||(this.result.addEdge(t,r[n]),this.makePiece(e,r[n]))}}};